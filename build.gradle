plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'me.sherhsnyaga'
version = '2.2.0'
repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack-repo'
        url = 'https://jitpack.io'
    }

    maven {
        name = 'phoenix'
        url = 'https://nexus.phoenixdevt.fr/repository/maven-public/'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    shadow "net.kyori:adventure-text-minimessage:4.13.1"
    shadow "net.kyori:adventure-api:4.13.1"
    shadow 'net.kyori:adventure-platform-bukkit:4.3.4'

    compileOnly "org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT"
    compileOnly 'com.github.LoneDev6:API-ItemsAdder:3.6.1'
    compileOnly 'io.lumine:MythicLib-dist:1.6.2-SNAPSHOT'
    compileOnly 'net.Indyuce:MMOItems-API:6.9.5-SNAPSHOT'
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.runtimeClasspath, project.configurations.shadow]
    archiveFileName = "${rootProject.name}-${rootProject.version}-b${getBuildVersion()}.jar"

    relocate('net.kyori', 'me.shershnyaga.kyori')
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

Integer getBuildVersion() {
    Integer build = 0
    def buildInfoFile = file("./build.properties")

    if (!buildInfoFile.exists()) {
        buildInfoFile.createNewFile()
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter('./.gradle/build.properties'))
        bufferedWriter.write("${version.toString()}=1")
        bufferedWriter.close()
    }
    else {
        Properties properties = new Properties()
        FileInputStream stream = new FileInputStream(buildInfoFile)
        properties.load(stream)

        if (properties[version.toString()] != null)
            build = Integer.parseInt(properties[version] as String) + 1

        properties[version] = build.toString()
        properties.store(buildInfoFile.newWriter(), null)
        stream.close()
    }

    return build
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}